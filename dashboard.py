# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GhywIBaDHPs4I-jU9A7mi-cPHRUCQDcb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency

sns.set(style='dark')

#Menyiapkan Data Frame
days_df=pd.read_csv('day.csv')
print(days_df.head())

hour_df=pd.read_csv('hour.csv')
print(hour_df.head())

days_df['dteday']=pd.to_datetime(days_df['dteday'])
year_2011=days_df[days_df['dteday'].dt.year == 2011] #contain data from 2011 only
year_2012=days_df[days_df['dteday'].dt.year == 2012] #contain data from 2012 only
print(year_2011.head())
print(year_2012.head())

#2011
def create_daily_rental_df(year_2011):
    daily_rental_df = year_2011.resample(rule='D', on='dteday').agg({
        "instant": "nunique",
        "registered": "sum",
        "casual": "sum",
        "cnt": "sum"
    })
    daily_rental_df = daily_rental_df.reset_index()
    daily_rental_df.rename(columns={
        "instant": "rental_count",
        "registered": "revenue_registered",
        "casual": "revenue_casual",
        "cnt": "revenue_cnt"
    }, inplace=True)
    return daily_rental_df

#2012
def create_daily_rental_df(year_2012):
    daily_rental_df = year_2012.resample(rule='D', on='dteday').agg({
        "instant": "nunique",
        "registered": "sum",
        "casual": "sum",
        "cnt": "sum"
    })
    daily_rental_df = daily_rental_df.reset_index()
    daily_rental_df.rename(columns={
        "instant": "rental_count",
        "registered": "revenue_registered",
        "casual": "revenue_casual",
        "cnt": "revenue_cnt"
    }, inplace=True)
    return daily_rental_df

def create_sum_rental_df(year_2011):
    sum_rental_df = year_2011.groupby("mnth").quantity_x.sum().sort_values(ascending=False).reset_index()
    return sum_rental_df

def create_sum_rental_df(year_2012):
    sum_rental_df = year_2012.groupby("mnth").quantity_x.sum().sort_values(ascending=False).reset_index()
    return sum_rental_df

def create_byweathersit_df(year_2011):
    byweathersit_df = year_2011.groupby(by="weathersit").instant.nunique().reset_index()
    byweathersit_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)

    return byweathersit_df

def create_byweathersit_df(year_2012):
    byweathersit_df = year_2012.groupby(by="weathersit").instant.nunique().reset_index()
    byweathersit_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)

    return byweathersit_df

def create_byseason_df(year_2011):
    byseason_df = year_2011.groupby(by="season").instant.nunique().reset_index()
    byseason_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)
    byseason_df['season'] = pd.Categorical(byseason_df['season'], ["1", "2", "3", "4"])

    return byseason_df

def create_byseason_df(year_2012):
    byseason_df = year_2012.groupby(by="season").instant.nunique().reset_index()
    byseason_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)
    byseason_df['season'] = pd.Categorical(byseason_df['season'], ["1", "2", "3", "4"])

    return byseason_df

def create_bymonth_df(year_2011):
    bymonth_df = year_2011.groupby(by="mnth").instant.nunique().reset_index()
    bymonth_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)

    return bymonth_df

def create_bymonth_df(year_2012):
    bymonth_df = year_2012.groupby(by="mnth").instant.nunique().reset_index()
    bymonth_df.rename(columns={
        "instant": "rental_count"
    }, inplace=True)

    return bymonth_df

def create_rfm_df(year_2011):
    rfm_df = year_2011.groupby(by="instant", as_index=False).agg({
        "registered": "sum",
        "instant": "nunique",
        "casual": "sum",
        "cnt": "sum"
    })
    rfm_df.columns = ["instant", "max_rental_timestamp", "frequency"]

    rfm_df["max_rental_timestamp"] = rfm_df["max_rental_timestamp"].dt.date
    recent_date = year_2011["dteday"].dt.date.max()
    rfm_df["recency"] = rfm_df["max_rental_timestamp"].apply(lambda x: (recent_date - x).days)
    rfm_df.drop("max_rental_timestamp", axis=1, inplace=True)

    return rfm_df

def create_rfm_df(year_2012):
    rfm_df = year_2012.groupby(by="instant", as_index=False).agg({
        "registered": "sum",
        "instant": "nunique",
        "casual": "sum",
        "cnt": "sum"
    })
    rfm_df.columns = ["instant", "max_rental_timestamp", "frequency"]

    rfm_df["max_rental_timestamp"] = rfm_df["max_rental_timestamp"].dt.date
    recent_date = year_2012f["dteday"].dt.date.max()
    rfm_df["recency"] = rfm_df["max_rental_timestamp"].apply(lambda x: (recent_date - x).days)
    rfm_df.drop("max_rental_timestamp", axis=1, inplace=True)

    return rfm_df

# Load cleaned data
datetime_columns = ["dteday"]
year_2011.sort_values(by="dteday", inplace=True)
year_2011.reset_index(inplace=True)

for column in datetime_columns:
    year_2011[column] = pd.to_datetime(year_2011[column])

# Filter data
min_date = year_2011["dteday"].min()
max_date = year_2011["dteday"].max()

with st.sidebar:
    # Menambahkan logo perusahaan
    st.image("https://github.com/simio430/bicycle_sample/blob/raw/main/mainvisual.jpg")

# Filter data
min_date = year_2012["dteday"].min()
max_date = year_2012["dteday"].max()

st.header('Dicoding Project Collection Dashboard :sparkles:')

st.subheader('Monthly Rentals')

#Untuk melihat naik dan turunnya suatu data maka metode yang efektif digunakan adalah line chart
#Langkah kedua adalah dengan melakukan visualisasi data dengan menggunakan Line Chart
#Line Chart
#Numbers of Bikers per Month in the year of 2011
monthlybikers=year_2011.groupby(by='mnth').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(monthlybikers)
fig, ax = plt.subplots(figsize=(16, 8))
linemonthly = monthlybikers.plot(ax=ax, marker='o')
linemonthly.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.title("Number of Bikers per Month (2011)", loc="center", fontsize=20)
plt.xticks(rotation=0)
plt.show()
st.pyplot(fig)

#Numbers of Bikers per Month in the year of 2012
monthlybikers=year_2012.groupby(by='mnth').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(monthlybikers)
fig, ax = plt.subplots(figsize=(16, 8))
linemonthly = monthlybikers.plot(ax=ax, marker='o')
linemonthly.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.title("Number of Bikers per Month (2012)", loc="center", fontsize=20)
plt.xticks(rotation=0)
plt.show()
st.pyplot(fig)

st.subheader("Jumlah Bikers Tiap Kondisi Musim Tertentu")

#Untuk menunjukkan banyaknya jumlah bikers pada tiap kondisi musim tertentu dengan menggunakan data temp dan weathersit
#Untuk mengetahui seberapa banyak jumlah rental dalam tiap kondisi cuaca (weathersit) maka metode yang digunakan adalah bar chart
#Bar Chart

#Number of Registered Bikers in 2011
weathersit_bikers=year_2011.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)
fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="registered",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Registered Bikers by weathersit in 2011", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

#Number of Registered Bikers in 2012
weathersit_bikers=year_2012.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)

fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="registered",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Registered Bikers by Weathersit in 2012", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

#Number of Casual Bikers in 2011
weathersit_bikers=year_2011.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)

fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="casual",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Casual Bikers by Weathersit in 2011", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

#Number of Casual Bikers in 2012
weathersit_bikers=year_2012.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)

fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="casual",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Casual Bikers by Weathersit in 2012", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

#Number of Total Bikers in 2011
weathersit_bikers=year_2011.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)

fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="cnt",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Total Bikers by Weathersit in 2011", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

#Number of Total Bikers in 2012
weathersit_bikers=year_2012.groupby(by='weathersit').agg({
    'registered': 'sum',
    'cnt': 'sum',
    'casual': 'sum',
}).round(0)
print(weathersit_bikers)

fig, ax = plt.subplots(figsize=(16, 8))
sns.barplot(
    y="cnt",
    x="weathersit",
    data=weathersit_bikers
)
plt.title("Number of Total Bikers by Weathersit in 2012", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()
st.pyplot(fig)

st.subheader("Regression Scatter Plot Temperature x Total of Bikers")

#Dari visualisasi data yang telah digunakan, didapatkan sebuah pola yang menunjukkan bahwa ada pengaruh antara kondisi cuaca dengan jumlah rental
#Langkah selanjutnya adalah dengan menunjukkan regresi scatter plot untuk menunjukkan pengaruh antara temperature/suhu cuaca terhadap jumlah rental
#Regression Scatter Plot Between Temperature and Total of Bikers in 2011
#Data in 2011
fig, ax = plt.subplots(figsize=(16, 8))
sns.regplot(
    y=year_2011["cnt"],
    x=year_2011["temp"]
)
plt.title("Scatter Plot of Temperature and Total of Bikers in 2011", loc="center", fontsize=15)
plt.show()
st.pyplot(fig)
#Regression Scatter Plot Between Temperature and Total of Bikers in 2012
#Data in 2012
fig, ax = plt.subplots(figsize=(16, 8))
sns.regplot(
    y=year_2012["cnt"],
    x=year_2012["temp"]
)
plt.title("Regression Scatter Plot of Temperature and Total of Bikers in 2012", loc="center", fontsize=15)
plt.show()
st.pyplot(fig)
st.caption('Copyright (c) Dicoding 2024')